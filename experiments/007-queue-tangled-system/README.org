#+TITLE: Experiment 007: Queue System with Org-Mode Tangling
#+STARTUP: content

* Overview

This experiment combines the QUEUE_USAGE_EXAMPLES.md content with org-mode tangling support to create a comprehensive, executable documentation system for the Efrit queue system. It includes Python files with Pydantic models for type safety and schema validation.

* Key Features

- *Literate Programming*: Org-mode files with tangled code blocks
- *Type Safety*: Pydantic models for queue message validation
- *Schema Generation*: JSON schemas from Pydantic models
- *Test Harness*: Single-line JSON test generation
- *Agent Coordination*: Multi-agent workflow management

* Files

- =queue-system.org= - Main org-mode file with tangled code
- =models.py= - Pydantic models for queue messages (generated)
- =test_harness.py= - Test generation and validation (generated)
- =agent_coordinator.py= - Multi-agent workflow management (generated)
- =queue_client.py= - Python client for queue interaction (generated)

* Quick Start

** Tangle the org file
#+begin_src bash
emacs --batch queue-system.org -f org-babel-tangle
#+end_src

** Install Python dependencies
#+begin_src bash
pip install pydantic typing-extensions
#+end_src

** Run tests
#+begin_src bash
python test_harness.py
#+end_src

** Start agent coordination
#+begin_src bash
python agent_coordinator.py
#+end_src

* Org-Mode Integration

The org file includes:
- Code blocks that tangle to actual Python files
- JSON schema generation
- Interactive examples
- Agent workflow definitions
- Test case generation

* Agent Types Supported

- L5 Engineer (Implementation)
- L7 Architect (Design)
- Security Expert
- Performance Engineer
- QA Engineer

* Schema Validation

All queue messages are validated against Pydantic schemas, ensuring type safety and structure consistency across the entire system.

* See Also

- =queue-system.org= - The main implementation file
- =/plans/EFRIT_QUEUE_SYSTEM.md= - Original queue system design
- =/QUEUE_USAGE_EXAMPLES.md= - Usage examples